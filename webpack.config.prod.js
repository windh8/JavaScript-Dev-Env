import path from "path";
import webpack from 'webpack';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import webpackMd5Hash from 'webpack-md5-hash';
import ExtractTextPlugin from 'extract-text-webpack-plugin';

export default {
	//entry point of our application; allows for relative paths
	entry: {
		//Main JavaScript Bundle
		main: "./src/index",

		//Will contain 3rd party library (vendor code)
		vendor: "./src/vendor"
	},

	//Specifies how sourcemaps should be generated
	//'inline-source-map': recommended for development
	//'source-map': recommended for production (Slower to build, but provides the highest quality source-map experience)
	devtool: "source-map",
	/*debug: true,*/  //This property was removed in Webpack 2

	devServer: {
		//Setting to false will display a list of all files that are being bundled
		noInfo:false
	},

	//Used to targert an environment, set to web in this app so that it can run in browser
	target: "web",

	//Specifies where to create the webpack bundle
    //When creating a bundle for production, we should write
	//physical files to a folder called 'dist' (short for distribution; for best practices)
	output: {
		path: path.resolve(__dirname, "dist"),
		publicPath: "/",

		//If generating multiple bundles, we can no longer
		//utilize a hard coded name here, instead we need to declare a
		//place holder by using [].
		//This will tell webpack to use the name defined in the entry point above. It will generate a 'name.js' & 'vendor.js'.
		//chunkhash is a variable generated by webpack-md5-hash for cache busting. Filename will change only when we change the code
		filename: '[name].[chunkhash].js'
		//filename: "bundle.js"
	},

	//
	plugins: [
		//Generate an external css file with a hash in the filename
		//Css filename selected, on re-build, will change (its hash value) when css content is changed
		new ExtractTextPlugin("[name].[contenthash].css"),

		//Hash the files using md5 so that their names change when the content changes
		new webpackMd5Hash(),

		//Use CommonsChunkPlugin to create a separate bundle
		//of vendor libraries (code referenced in our 'vendor' entry point)
		//so that they're cached separately
		new webpack.optimize.CommonsChunkPlugin({
			//the value for the key 'name' corresponds to the entry point
			//defined above in the 'entry' property
			name: 'vendor'
		}),

		//Create an HTML file that includes a refernce to the bundle that webpack will generate.
		new HtmlWebpackPlugin({
			//The 'index.html' file in the 'src' directory is our template
			template: 'src/index.html',
			minify: {
				removeComments: true,
				collapseWhitespace: true,
				removeRedundantAttributes: true,
				useShortDoctype: true,
				removeEmptyAttributes: true,
				removeStyleLinkTypeAttributes: true,
				keepClosingSlash: true,
				minifyJS: true,
				minifyCSS: true,
				minifyURLs:true
			},
			//Setting 'inject: true' will inject any necessary script tags automatically
			inject: true
		}),

		//Eliminate duplicate packages when generating bundle
		//will look through all files that are being bundled and will ensure no duplicates
		//This plugin was recently removed from webpack
		//new webpack.optimize.DedupePlugin(),

		//Minify JS (uglify the code)
		new webpack.optimize.UglifyJsPlugin()
	],

	//Enables webpack to process more than just JavaScript files
	module:{
		//In regards to migrating from webpack 1 to webpack 2
		//'module.loaders' is now 'module.rules'
		//'rules' tell webpack how to handle each file specified below
		rules: [
			{test: /\.js$/, exclude: /node_modules/, loader: "babel-loader"},
			/*{test: /\.css$/, use: [
				{loader: "style-loader"},
				{loader: "css-loader", options: {modules: true}}
			]}*/
			{test: /\.css$/, use: ExtractTextPlugin.extract({
				fallback: "style-loader",
				use: "css-loader"
			})}
		]
	}
}
